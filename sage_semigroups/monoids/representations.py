"""

"""

# TODO: name choices
# - representation / module
# - distinction between linear and discrete
# - given a module M, name of the method recovering the
#   semigroup/algebra/... acting on it?

from sage.misc.constant_function import ConstantFunction
from sage.categories.enumerated_sets import EnumeratedSets
from sage.structure.unique_representation import UniqueRepresentation
from sage.structure.parent import Parent


def identity(x):  # TODO: find this in the Python or Sage library
    return x


class SetWithAction(UniqueRepresentation, Parent):

    @staticmethod
    def __classcall__(cls, semigroup, set, action, side=None, category=None):
        set = EnumeratedSets()(set)
        assert set in EnumeratedSets().Finite()
        category = semigroup.category().SetsWithAction().or_subcategory(category)
        return super(SetWithAction, cls).__classcall__(cls, semigroup, set, action, side, category)

    def __init__(self, semigroup, set, action, side, category):
        """
        EXAMPLES::

            sage: from sage.monoids.representations import SetWithAction
            sage: S = SetWithAction(ZZ, IntegerModRing(5), operator.mul)
            sage: TestSuite(S).run()
        """
        self._set = set
        self._semigroup = semigroup
        self._action = action
        self._side = side
        self.action = action   # This could be made into an Action
        # TODO: simplify what's below once we have support for *isomorphic facade sets*
        category = (EnumeratedSets().Finite().IsomorphicObjects(), category)
        Parent.__init__(self, facade=set, category=category)
        self.ambient = ConstantFunction(set)
        self.lift = identity
        self.retract = identity

    def _repr_(self):
        r"""
        EXAMPLES::

            sage: from sage.monoids.representations import SetWithAction
            sage: SetWithAction(ZZ, IntegerModRing(5), operator.mul)
            Ring of integers modulo 5 endowed with an action of Integer Ring
        """
        return "%s endowed with an action of %s" % (self.ambient(),
                                                    self.semigroup())

    def semigroup(self):
        """
        Returns the semigroup acting on this representation
        """
        return self._semigroup

    def side(self):
        """
        Returns on which side the action occurs

        EXAMPLES::

            sage: S = Semigroups().Finite().example().with_regular_action(side = "left")
            sage: S.side()
            'left'
            sage: S = Semigroups().Finite().example().with_regular_action(side = "right")
            sage: S.side()
            'right'
        """
        return self._side

    def an_element_disabled(self):
        """
        Iteration over the elements of the module

        EXAMPLES::

            sage: M = SetsWithAction().example(); M
            Representation of the monoid generated by <2,3> acting on Z/10 Z by multiplication
            sage: M.an_element()
            0
        """
        return self._set.an_element()

    def __iter__disabled(self):
        """
        Iteration over the elements of the module

        EXAMPLES::

            sage: M = SetsWithAction().example(); M
            Representation of the monoid generated by <2,3> acting on Z/10 Z by multiplication
            sage: list(M)
            [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        """
        return iter(self._set)

    def subquotient(self, elements):
        """
        Submodules

         - ``elements`` -- a set of elements of ``self``, which
           forms a class or union of classes of ``self``

        Returns the subquotient of ``self`` having ``elements`` as elements

        EXAMPLES::

            sage: M = SetsWithAction().example(); M
            Representation of the monoid generated by <2,3> acting on Z/10 Z by multiplication
            sage: M.classes()
            [{1, 3, 9, 7}, {5}, {0}, {8, 2, 4, 6}]

            sage: N = M.subquotient(Set([1, 3, 9, 7,  5,  0]))
            sage: list(N)
            [0, 1, 3, 5, 7, 9]

        The action on `N` coincides with that on `M`, except that if
        the result is outside of `N`, then `None` is returned
        instead::

            sage: f2,f3 = M.semigroup().semigroup_generators()
            sage: M.action(f2, 7)
            4
            sage: N.action(f2, 7)

        Here is the Cayley graph of the restriction::

            sage: N.cayley_graph().edges()
            [(0, 0, 2), (0, 0, 3), (1, 3, 3), (3, 9, 3), (5, 0, 2), (5, 5, 3), (7, 1, 3), (9, 7, 3)]

        .. todo:: make this a proper subquotient, with lift / retract / ...
        """
        elements_set = set(elements)

        def action(g, x):
            gx = self._action(g, x)
            if gx in elements_set:
                return gx
            else:
                return None
        return SetWithAction(self.semigroup(), elements, action, side=self.side())

    def submodule(self, elements):
        """
        Submodules

         - ``elements`` -- a set of elements of ``self``, which
           forms a class or union of classes of ``self``

        Returns the restriction of ``self`` on ``elements``.

        EXAMPLES::

            sage: M = Semigroups().SetsWithAction().example(); M
            Representation of the monoid generated by <2,3> acting on Z/10 Z by multiplication
            sage: M.classes()
            [{1, 3, 9, 7}, {5}, {0}, {8, 2, 4, 6}]

            sage: N = M.submodule(Set([2, 4, 6, 8]))
            sage: list(N)
            [8, 2, 4, 6]

        The action on `N` coincides with that on `M`::

            sage: f2,f3 = M.semigroup().semigroup_generators()
            sage: M.action(f2, 7)
            4
            sage: N.action(f2, 7)
            4

        Here is the Cayley graph of the restriction::

            sage: N.cayley_graph().edges()
            [(2, 4, 2), (2, 6, 3), (4, 2, 3), (4, 8, 2), (6, 2, 2), (6, 8, 3), (8, 4, 3), (8, 6, 2)]
        """
        return SetWithAction(self.semigroup(), elements, self._action,
                             side=self.side())
