# RESURRECTED

from sage.structure.parent import Parent
from sage.structure.unique_representation import UniqueRepresentation
from sage.combinat.free_module import CombinatorialFreeModule


class AbstractCharacterRing(UniqueRepresentation, Parent):
    r"""
    Character rings with realizations

    Let `S` be a semigroup (or algebra or ...), `K` be a ring and `C`
    be the category of left (resp. right) `S`-modules over `K`. This
    constructs the ring of characters for this category. This
    character ring itself has a base ring of characteristic `0`, which
    typically is `\ZZ`, or `\ZZ[q]`. In particular, it needs not have
    anything to do with `K`.

    INPUT:
    - ``base`` -- the semigroup `S`
    - ``modules_base_ring`` -- the ring `K`
    - ``base_ring`` -- a ring
    - ``side`` -- 'left' or 'right'

    EXAMPLES::

        sage: from sage_semigroups.monoids.character_ring import AbstractCharacterRing
        sage: S = HTrivialMonoids().Finite().example()
        sage: G = S.character_ring(GF(2), side='left')
        sage: G.some_elements()
        [2*S[0] + 2*S[1] + 3*S[2]]

    """

    # TODO: add a proper classcall
    def __init__(self, base, modules_base_ring, base_ring, side, q,
                 category=None):
        """
        EXAMPLES::

            sage: from sage_semigroups.monoids.character_ring import AbstractCharacterRing
            sage: S = HTrivialMonoids().Finite().example()
            sage: G1 = S.character_ring(GF(2), side='left')
            sage: G2 = AbstractCharacterRing(S, GF(2), ZZ, side = 'left', q = 1)
            sage: G1 is G2
            True
            sage: TestSuite(G1).run()
        """
        self._base_ring = base_ring
        self._q = q
        self._side = side
        self._modules_base_ring = modules_base_ring
        self._base = base
        self._character_ring_category = base.category().CharacterRings(base_ring)
        assert category is None
        category = self._character_ring_category.WithRealizations()
        Parent.__init__(self, category=category)

    def base(self):
        """
        EXAMPLES::

            sage: FiniteSemigroups().example().character_ring(QQ).base()
            An example of a finite semigroup: the left regular band generated by ('a', 'b', 'c', 'd')
        """
        return self._base

    def side(self):
        """
        EXAMPLES::

            sage: FiniteSemigroups().example().character_ring(QQ).base()
            An example of a finite semigroup: the left regular band generated by ('a', 'b', 'c', 'd')
        """
        return self._side

    def base_ring(self):
        """
        EXAMPLES::

            sage: FiniteSemigroups().example().character_ring(GF(2)).base_ring()
            Integer Ring
        """
        return self._base_ring

    def modules_base_ring(self):
        """
        Return the base ring for the modules this character ring is for

        EXAMPLES::

            sage: FiniteSemigroups().example().character_ring(GF(2)).base_ring()
            Integer Ring
        """
        return self._modules_base_ring

    def character_ring_category(self):
        """
        Return the  base ring for the modules this character ring is for

        .. todo:: generalize this to all realizations?

        EXAMPLES::

            sage: FiniteSemigroups().example().character_ring(GF(2)).character_ring_category()
            Category of character rings of finite semigroups over Integer Ring
        """
        return self._character_ring_category

    def _repr_(self):
        """
        EXAMPLES::

            sage: FiniteSemigroups().example().character_ring(QQ)
            The right-character ring of An example of a finite semigroup: the left regular band generated by ('a', 'b', 'c', 'd') over Rational Field
        """
        return "The %s-character ring of %s over %s" % (self.side(), self.base(), self.modules_base_ring())


class CharacterRing(CombinatorialFreeModule):

    def __init__(self, abstract, prefix, modules, index_set=None):
        """
        INPUT:
         - ``abstract`` -- the abstract character ring
         - ``prefix`` -- a string (e.g. "S", "P")
         - ``modules`` -- a string (e.g. "simple", "projective indecomposable")
         - ``index_set`` -- a list (or iterable) the indexing set for the basis

        By default, the index set is given by the index set for the
        simple modules.

        EXAMPLES::

            sage: G = HTrivialMonoids().Finite().example().character_ring(QQ)

        """
        self._abstract = abstract
        self._modules = modules
        if index_set is None:
            index_set = abstract.base().simple_modules_index_set()
        CombinatorialFreeModule.__init__(self,
                                         abstract.base_ring(), index_set,
                                         prefix=prefix,
                                         category=(abstract.character_ring_category().Realizations(),
                                                   abstract.Realizations()))

    def _repr_(self):
        """
        EXAMPLES::

            sage: S = HTrivialMonoids().Finite().example(); S.rename("S")
            sage: S.character_ring(QQ).S()
            The right-character ring of S over Rational Field in the basis of characters of simple right modules
            sage: S.character_ring(GF(2), side="left").P()
            The left-character ring of S over Finite Field of size 2 in the basis of characters of projective indecomposable left modules
        """
        return "%s in the basis of characters of %s modules" % (self._abstract, self._modules)

    def side(self):
        """

        """
        return self._abstract.side()

    def __getitem__(self, x):
        """
        EXAMPLES::

            sage: S = HTrivialMonoids().Finite().example(); S.rename("S")
            sage: s = S.character_ring(QQ).S()
            sage: s[1] + 2 * s[2]
            S[1] + 2*S[2]
        """
        # assert x in self.basis().keys()
        return self.monomial(x)
