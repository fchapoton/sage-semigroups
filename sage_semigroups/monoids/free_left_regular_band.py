"""
Free left regular bands

EXAMPLES::

    sage: import sage_semigroups
    Loading sage-semigroups and patching its features into Sage's library: ...

"""
#*****************************************************************************
#  Copyright (C) 2008-2009 Nicolas M. Thiery <nthiery at users.sf.net>
#
#  Distributed under the terms of the GNU General Public License (GPL)
#                  http://www.gnu.org/licenses/
#******************************************************************************
from sage.structure.unique_representation import UniqueRepresentation
from sage.structure.parent import Parent
from sage.structure.element_wrapper import ElementWrapper
from sage.misc.cachefunc import cached_method
from sage.sets.family import Family

class FreeLeftRegularBand(UniqueRepresentation, Parent):
    def __init__(self, alphabet):
        r"""
        The free left regular band

        EXAMPLES::

            sage: from sage_semigroups.monoids.free_left_regular_band import FreeLeftRegularBand
            sage: S = FreeLeftRegularBand(("a", "b", "c", "d")); S
            Free left regular band generated by ('a', 'b', 'c', 'd')
            sage: S = FreeLeftRegularBand(alphabet=('x','y')); S
            Free left regular band generated by ('x', 'y')
            sage: TestSuite(S).run(skip=["_test_elements", "_test_pickling"])
        """
        from sage.rings.integer import Integer
        if isinstance(alphabet,(int,Integer)):
            alphabet = tuple(chr(i) for i in range(97,97+alphabet))
        self.alphabet = alphabet
        from sage_semigroups.categories.finite_left_regular_bands import FiniteLeftRegularBands
        Parent.__init__(self, category = FiniteLeftRegularBands().FinitelyGenerated())

    def _repr_(self):
        return "Free left regular band generated by %s"%(self.alphabet,)

    @cached_method
    def one(self):
        r"""
        Returns the one of the monoid, as per :meth:`Monoids.ParentMethods.one`.

        EXAMPLES::

            sage: from sage_semigroups.monoids.free_left_regular_band import FreeLeftRegularBand
            sage: M = FreeLeftRegularBand(("a", "b", "c", "d"))
            sage: M.one()
            ''

        """
        return self("")

    def product(self, x, y):
        r"""
        Returns the product of two elements of the semigroup.

        EXAMPLES::

            sage: from sage_semigroups.monoids.free_left_regular_band import FreeLeftRegularBand
            sage: S = FreeLeftRegularBand(4)
            sage: S('a') * S('b')
            'ab'
            sage: S('a') * S('b') * S('a')
            'ab'
            sage: S('a') * S('a')
            'a'

        """
        assert x in self
        assert y in self
        x = x.value
        y = y.value
        return self(x + ''.join(c for c in y if c not in x))

    @cached_method
    def semigroup_generators(self):
        r"""
        Returns the generators of the semigroup.

        EXAMPLES::

            sage: from sage_semigroups.monoids.free_left_regular_band import FreeLeftRegularBand
            sage: S = FreeLeftRegularBand(alphabet=('x','y'))
            sage: S.semigroup_generators()
            Family ('x', 'y')

        """
        return Family([self(i) for i in self.alphabet])

    def an_element(self):
        r"""
        Returns an element of the semigroup.

        EXAMPLES::

            sage: from sage_semigroups.monoids.free_left_regular_band import FreeLeftRegularBand
            sage: S = FreeLeftRegularBand(('a', 'b', 'c', 'd'))
            sage: S.an_element()
            'cdab'

            sage: S = FreeLeftRegularBand(("b"))
            sage: S.an_element()
            'b'
        """
        return self(''.join(self.alphabet[2:]+self.alphabet[0:2]))

    class Element (ElementWrapper):
        wrapped_class = str
        __lt__ = ElementWrapper._lt_by_value

