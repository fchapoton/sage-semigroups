from sage.sets.set import Set_object_enumerated
from sage.structure.unique_representation import UniqueRepresentation
from sage.structure.parent import Parent
from sage.structure.element_wrapper import ElementWrapper
from sage.misc.cachefunc import cached_method
from sage.sets.family import Family

class FreeSemilattice(UniqueRepresentation, Parent):
    def __init__(self, alphabet=None):
        r"""
        The free semilattice

        EXAMPLES::

            sage: from sage_semigroups.monoids.free_semilattice import FreeSemilattice
            sage: S = FreeSemilattice(3); S
            Free semilattice generated by ('a', 'b', 'c')
            sage: S.list()
            [{}, {'a'}, {'b'}, {'c'}, {'a', 'b'}, {'a', 'c'}, {'c', 'b'}, {'a', 'c', 'b'}]
            sage: S.cardinality()
            8

            sage: S = FreeSemilattice(alphabet=('x','y')); S
            Free semilattice generated by ('x', 'y')
            sage: S.list()
            [{}, {'x'}, {'y'}, {'y', 'x'}]

            sage: TestSuite(S).run(skip=["_test_elements", "_test_pickling"])

        """
        from sage.rings.integer import Integer
        if isinstance(alphabet,(int,Integer)):
            alphabet = tuple(chr(i) for i in range(97,97+alphabet))
        self.alphabet = alphabet
        from sage_semigroups.categories.finite_left_regular_bands import FiniteLeftRegularBands
        Parent.__init__(self, category = FiniteLeftRegularBands().FinitelyGenerated())

    def _repr_(self):
        return "Free semilattice generated by %s" % (self.alphabet,)

    def __iter__(self):
        from sage.combinat.subset import Subsets
        for x in Subsets(self.alphabet):
            yield self(x)

    @cached_method
    def one(self):
        return self(Set_object_enumerated([]))

    def product(self, x, y):
        r"""
        EXAMPLES::

            sage: from sage_semigroups.monoids.free_semilattice import FreeSemilattice
            sage: S = FreeSemilattice(alphabet=('x','y')); S
            Free semilattice generated by ('x', 'y')
            sage: x, y = S(Set(['x'])) , S(Set(['y'])); x, y
            ({'x'}, {'y'})
            sage: x * x
            {'x'}
            sage: x * y
            {'y', 'x'}

        r"""
        assert x in self
        assert y in self
        return self(x.value.union(y.value))

    @cached_method
    def semigroup_generators(self):
        return Family([self(Set_object_enumerated([a])) for a in self.alphabet])

    def an_element(self):
        return self(Set_object_enumerated([self.alphabet[0]]))

    class Element (ElementWrapper):
        wrapped_class = Set_object_enumerated
        __lt__ = ElementWrapper._lt_by_value

