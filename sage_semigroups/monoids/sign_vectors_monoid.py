r"""
Monoid of sign vectors (0/1/-1 vectors)

EXAMPLES::

    sage: import sage_semigroups
    Loading sage-semigroups and patching its features into Sage's library: ...

"""

from sage.misc.cachefunc import cached_method
from sage.structure.unique_representation import UniqueRepresentation
from sage.structure.parent import Parent
from sage.structure.element_wrapper import ElementWrapper
from sage.sets.family import Family


class SignVectorsMonoid(UniqueRepresentation, Parent):
    r"""
    EXAMPLES::

        sage: from sage_semigroups.monoids.sign_vectors_monoid import SignVectorsMonoid
        sage: L2 = SignVectorsMonoid(((1,), (-1,))); L2
        Monoid of sign vectors generated by the sign vectors : Family ((1,), (-1,))
        sage: L2.list()
        [(0,), (-1,), (1,)]

        sage: L = SignVectorsMonoid(((1,0), (-1,0), (0,1), (0,-1))); L
        Monoid of sign vectors generated by the sign vectors : Family ((1, 0), (-1, 0), (0, 1), (0, -1))
        sage: sorted(L.list())
        [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 0), (0, 1), (1, -1), (1, 0), (1, 1)]

        sage: TestSuite(L).run()

    """
    def __init__(self, sign_vectors):
        self._sign_vectors = sign_vectors
        from sage_semigroups.categories.finite_left_regular_bands import FiniteLeftRegularBands
        Parent.__init__(self, category=FiniteLeftRegularBands().FinitelyGenerated())

    def _repr_(self):
        return "Monoid of sign vectors generated by the sign vectors : %s" % self.semigroup_generators()

    @cached_method
    def semigroup_generators(self):
        return Family(map(self, self._sign_vectors))

    def an_element(self):
        return self.semigroup_generators()[0]

    @cached_method
    def one(self):
        length = len(self.an_element().value)
        return self((0,) * length)

    def product(self, x, y):
        r"""

        EXAMPLES::

            sage: from sage_semigroups.monoids.sign_vectors_monoid import SignVectorsMonoid
            sage: L = SignVectorsMonoid(((1,0), (0,1), (-1,0), (0,-1))); L
            Monoid of sign vectors generated by the sign vectors : Family ((1, 0), (0, 1), (-1, 0), (0, -1))
            sage: L((1, 0)) * L((1, 0))
            (1, 0)
            sage: L((1, 0)) * L((-1, -1))
            (1, -1)

        """
        x = x.value
        y = y.value
        z = [0] * len(x)
        for i in range(len(x)):
            z[i] = x[i] if x[i] != 0 else y[i]
        return self(tuple(z))

    class Element (ElementWrapper):
        wrapped_class = tuple
        __lt__ = ElementWrapper._lt_by_value
