class Monoids:
    class ParentMethods:

       def submonoid(self, generators, category=None):
            r"""
            Return the multiplicative submonoid generated by ``generators``.

            INPUT:

            - ``generators`` -- a finite family of elements of
              ``self``, or a list, iterable, ... that can be converted
              into one (see :class:`Family`).

            - ``category`` -- a category

            This is a shorthand for
            :meth:`Semigroups.ParentMethods.subsemigroup` that
            specifies that this is a submonoid, and in particular that
            the unit is ``self.one()``.

            EXAMPLES::

                sage: R = IntegerModRing(15)
                sage: M = R.submonoid([R(3),R(5)]); M
                A submonoid of (Ring of integers modulo 15) with 2 generators
                sage: M.list()
                [1, 3, 5, 9, 0, 10, 12, 6]

            Not the presence of the unit, unlike in::

                sage: S = R.subsemigroup([R(3),R(5)]); S
                A subsemigroup of (Ring of integers modulo 15) with 2 generators
                sage: S.list()
                [3, 5, 9, 0, 10, 12, 6]

            This method is really a shorthand for subsemigroup::

                sage: M2 = R.subsemigroup([R(3),R(5)], one=R.one())
                sage: M2 is M
                True

            Test that categories are correctly set::

                sage: R = IntegerModRing(17)
                sage: M = R.submonoid([R(3)], category=Groups().Finite())
                sage: M in Groups().Commutative().Finite()
                True
            """
            return self.subsemigroup(generators, one=self.one(), category=category)
