from sage.misc.lazy_import import LazyImport
from sage.misc.cachefunc import cached_method
from .set_with_action_functor import SetsWithActionCategory

class Semigroups:

    class SubcategoryMethods:

        def SetsWithAction(self):
            """
            Returns the category of sets endowed with an action of some object of ``self``

            INPUT:

            - ``self`` -- a subcategory of ``Sets()``


            EXAMPLES:

            The category of sets endowed with an action of some monoid::

                sage: Monoids().SetsWithAction()
                Category of sets endowed with an action of a semigroup

            The category of sets endowed with an action of some finite group,
            also known as `G`-sets::

                sage: Groups().Finite().SetsWithAction()
                Category of sets endowed with an action of a semigroup

            TESTS::

                sage: TestSuite(Groups().Finite().SetsWithAction()).run()
            """
            return SetsWithActionCategory.category_of(self)

    Modules = LazyImport('sage.categories.module_functor', 'Modules')


    class ParentMethods:

        @cached_method
        def cayley_graph_cached(self, *args, **kwds):
            return self.cayley_graph(*args, **kwds)

        @cached_method
        def with_regular_action(self, side='right'):
            """
            EXAMPLES::

                sage: S = Semigroups().Finite().example()
                sage: a,b,c,d = S.semigroup_generators()
                sage: x = a*b
                sage: RS = S.with_regular_action()

            The action is by default given by multiplication on the right::

                sage: RS.action(c, x)
                'abc'

            The same with action by multiplication on the left::

                sage: LS = S.with_regular_action(side='left')
                sage: LS.action(c, x)
                'cab'

            TESTS::

                sage: LS = S.with_regular_action(side='right')
                sage: LS.action(c, x)
                'abc'

                sage: S = HTrivialMonoids().Finite().example()
                sage: RS = S.with_regular_action()
                sage: RS.category().is_subcategory(HTrivialMonoids().Finite().SetsWithAction())
            """
            from sage.monoids.representations import SetWithAction
            if side == 'left':
                action = self.product
            else:
                action = lambda x,y: self.product(y,x)
            return SetWithAction(self, self, action, side = side)

        @cached_method
        def regular_representation(self, side='right', base_ring = None):
            """
            EXAMPLES::

                sage: S = Semigroups().Finite().example(); S
                An example of a finite semigroup: the left regular band generated by ('a', 'b', 'c', 'd')
                sage: S.rename("S")
                sage: a,b,c,d = S.semigroup_generators()
                sage: M = S.regular_representation(); M
                Free module generated by S endowed with an action of S over Rational Field
                sage: v = M.an_element(); v
                2*B['a'] + 3*B['b'] + 2*B['c']

            By default, the action is given by multiplication on the right::

                sage: M.action(a, v)
                2*B['a'] + 3*B['ba'] + 2*B['ca']

            The same with action by multiplication on the left, and
            over the base ring `\ZZ/3Z`::

                sage: M = S.regular_representation(side='left', base_ring = IntegerModRing(3))
                sage: v = M.an_element(); v
                2*B['a'] + 2*B['c']
                sage: M.action(a, v)
                2*B['a'] + 2*B['ac']

            TESTS::

                sage: S = HTrivialMonoids().Finite().example()
                sage: RS = S.regular_representation(QQ)
                sage: RS.category().is_subcategory(HTrivialMonoids().Finite().Modules(QQ))
                sage: TestSuite(RS).run()    # pickling currently fails!
            """
            if base_ring is None:
                from sage.rings.rational_field import QQ
                base_ring = QQ
            return self.with_regular_action(side = side).algebra(base_ring)

    SetsWithAction = LazyImport('sage.categories.sets_with_action', 'SetsWithAction')
    Modules = LazyImport('sage.categories.semigroup_modules', 'SemigroupModules')
