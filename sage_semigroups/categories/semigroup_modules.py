r"""
Modules with a distinguished linear action of a semigroup
"""
#*****************************************************************************
#  Copyright (C) 2011 Nicolas M. Thiery <nthiery at users.sf.net>
#
#  Distributed under the terms of the GNU General Public License (GPL)
#                  http://www.gnu.org/licenses/
#******************************************************************************

from sage.misc.cachefunc import cached_method
from sage.categories.modules import Modules
from sage_semigroups.categories.module_functor import ModulesCategory
from sage.categories.morphism import SetMorphism

class SemigroupModules(ModulesCategory):

    @cached_method
    def extra_super_categories(self):
        r"""
        Return the list of the (immediate) super categories of
        ``self``, as per :meth:`Category.super_categories`.

        EXAMPLES::

            sage: Semigroups().Modules(QQ).extra_super_categories()
            [Category of sets endowed with an action of a semigroup, Category of vector spaces over Rational Field]
            sage: Semigroups().Modules(QQ).super_categories()
            [Category of sets endowed with an action of a semigroup, Category of vector spaces over Rational Field]

        """
        return [self.base_category().SetsWithAction(), Modules(self.base_ring())]

    class ParentMethods:

        def annihilator_of_subsemigroup(self, S):
            """
            INPUT:

             - ``S`` -- some elements of the semigroup acting on ``self``

            Return the supspace of the elements of ``self`` on
            which ``S`` acts by 0.

            EXAMPLES::

                sage: M = Semigroups().SetsWithAction().example().algebra(QQ); M
                Free module generated by Representation of the monoid generated by <2,3> acting on Z/10 Z by multiplication over Rational Field
                sage: S = M.semigroup()
                sage: f2, f3 = S.semigroup_generators()

            In this example, f2 kills the elements of the form::

                sage: M.action(f2, M.monomial(1) - M.monomial(1+5))
                0
                sage: M.action(f2, M.monomial(2) - M.monomial(2+5))
                0

            and so on. This gives the following annihilator::

                sage: M.annihilator_of_subsemigroup([f2])
                Vector space of degree 10 and dimension 5 over Rational Field
                Basis matrix:
                [ 1  0  0  0  0 -1  0  0  0  0]
                [ 0  1  0  0  0  0 -1  0  0  0]
                [ 0  0  1  0  0  0  0 -1  0  0]
                [ 0  0  0  1  0  0  0  0 -1  0]
                [ 0  0  0  0  1  0  0  0  0 -1]

            On the other hand, f3 acts cyclically, and the
            annihilator is trivial::

                sage: M.annihilator_of_subsemigroup([f3])
                Vector space of degree 10 and dimension 0 over Rational Field
                Basis matrix:
                []
            """
            return self.annihilator(S, action = self.action, side='left')

        def representation(self, s):
            """
            Return the representation of `s` as a linear morphism acting on ``self``

            INPUT:
            - `s` -- an element of the semigroup acting on ``self``

            EXAMPLES::

                sage: S = AperiodicMonoids().Finite().example(5); S
                sage: A = S.simple_module(3)
                sage: pi = S.monoid_generators()
                sage: pi
                Finite family {1: 11345, 2: 12245, 3: 12335, 4: 12344, -1: 22345, -4: 12355, -3: 12445, -2: 13345}
                sage: phi = A.representation(pi[1])
                Generic endomorphism of A quotient of Free module generated by {33444, 33334, 33344, 34444} endowed with an action of The finite H-trivial monoid of order preserving maps on {1, .., 5} over Rational Field
                sage: phi(A.an_element())
                2*B[11144] + 2*B[11444] + 3*B[11114]
                sage: phi.matrix()
                [1 0 0 0]
                [0 0 0 0]
                [0 0 1 0]
                [0 1 0 1]
            """
            from sage.categories.homset import End
            import functools
            return SetMorphism(End(self, Modules(self.base_ring()).WithBasis().FiniteDimensional()),
                               functools.partial(self.action, s))

        def character_of(self, s):
            """
            Return the trace of `s` as a linear morphism acting on ``self``

            INPUT:
            - `s` -- an element of the semigroup acting on ``self``

            EXAMPLES::

                sage: S = AperiodicMonoids().Finite().example(5); S
                sage: M = S.simple_module(3)
                sage: M.character_of(S.one())
                4
                sage: pi = S.monoid_generators()
                sage: pi
                Finite family {1: 11345, 2: 12245, 3: 12335, 4: 12344, -1: 22345, -4: 12355, -3: 12445, -2: 13345}
                sage: pi.map(M.character_of)
                Finite family {1: 3, 2: 3, 3: 3, 4: 3, -1: 3, -4: 3, -3: 3, -2: 3}
            """
            return self.representation(s).matrix().trace()
